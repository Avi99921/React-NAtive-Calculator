{"ast":null,"code":"var _jsxFileName = \"C:\\\\Avishka\\\\React Native\\\\my-calculator\\\\Components\\\\TextInput\\\\Display.js\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\n\nfunction Display(_ref) {\n  var data = _ref.data;\n  var Text = data;\n  var textArray = [];\n  var newTextArray = [];\n\n  if (Text.length >= 4) {\n    if (Text != 'Out of range') {\n      if (Text.includes('.')) {\n        if (Text.indexOf('.') > 3) {\n          var floatIndex = Text.indexOf('.');\n          var afterFloatPart = Text.slice(floatIndex);\n          Text = Text.slice(0, floatIndex);\n          textArray.push(Text.slice(-3));\n          var lastIndex = Text.length - 3;\n          var firstIndex = lastIndex - 3;\n\n          while (true) {\n            if (firstIndex <= 0) {\n              textArray.push(Text.slice(0, lastIndex));\n              break;\n            }\n\n            textArray.push(Text.slice(firstIndex, lastIndex));\n            lastIndex = firstIndex;\n            firstIndex = lastIndex - 3;\n          }\n\n          var arrayIndex = textArray.length - 1;\n\n          while (true) {\n            newTextArray.push(textArray[arrayIndex]);\n\n            if (arrayIndex == 0) {\n              break;\n            }\n\n            arrayIndex -= 1;\n          }\n\n          arrayIndex = 0;\n          Text = '';\n\n          while (true) {\n            if (arrayIndex == newTextArray.length) {\n              break;\n            }\n\n            var concatString = newTextArray[arrayIndex] + \",\";\n            Text += concatString;\n            arrayIndex += 1;\n          }\n\n          Text = Text.slice(0, Text.length - 1) + afterFloatPart;\n        } else {\n          Text = Text;\n        }\n      } else {\n        console.log(\"56656\");\n        textArray.push(Text.slice(-3));\n\n        var _lastIndex = Text.length - 3;\n\n        var _firstIndex = _lastIndex - 3;\n\n        while (true) {\n          if (_firstIndex <= 0) {\n            textArray.push(Text.slice(0, _lastIndex));\n            break;\n          }\n\n          textArray.push(Text.slice(_firstIndex, _lastIndex));\n          _lastIndex = _firstIndex;\n          _firstIndex = _lastIndex - 3;\n        }\n\n        var _arrayIndex = textArray.length - 1;\n\n        while (true) {\n          newTextArray.push(textArray[_arrayIndex]);\n\n          if (_arrayIndex == 0) {\n            break;\n          }\n\n          _arrayIndex -= 1;\n        }\n\n        _arrayIndex = 0;\n        Text = '';\n\n        while (true) {\n          if (_arrayIndex == newTextArray.length) {\n            break;\n          }\n\n          var _concatString = newTextArray[_arrayIndex] + \",\";\n\n          Text += _concatString;\n          _arrayIndex += 1;\n        }\n\n        Text = Text.slice(0, Text.length - 1);\n      }\n    }\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    textAlign: \"right\",\n    style: {\n      color: \"white\",\n      width: Dimensions.get('screen').width,\n      fontSize: Text.length > 15 ? 30 : 40\n    },\n    showSoftInputOnFocus: false,\n    editable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, Text)));\n}\n\nexport default Display;\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    width: Dimensions.get('screen').width,\n    height: Dimensions.get('screen').height / 10,\n    backgroundColor: 'red'\n  },\n  textinput: {\n    color: \"white\",\n    fontSize: Text.length > 15 ? 30 : 40,\n    width: Dimensions.get('screen').width\n  }\n});","map":{"version":3,"sources":["C:/Avishka/React Native/my-calculator/Components/TextInput/Display.js"],"names":["React","Display","data","Text","textArray","newTextArray","length","includes","indexOf","floatIndex","afterFloatPart","slice","push","lastIndex","firstIndex","arrayIndex","concatString","console","log","Keyboard","dismiss","styles","container","color","width","Dimensions","get","fontSize","StyleSheet","create","flexDirection","height","backgroundColor","textinput"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;AAGA,SAASC,OAAT,OAAyB;AAAA,MAAPC,IAAO,QAAPA,IAAO;AACzB,MAAIC,IAAI,GAAGD,IAAX;AACA,MAAIE,SAAS,GAAG,EAAhB;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAGF,IAAI,CAACG,MAAL,IAAa,CAAhB,EAAkB;AAEd,QAAGH,IAAI,IAAE,cAAT,EAAwB;AACpB,UAAIA,IAAI,CAACI,QAAL,CAAc,GAAd,CAAJ,EAAuB;AACnB,YAAGJ,IAAI,CAACK,OAAL,CAAa,GAAb,IAAkB,CAArB,EAAuB;AACnB,cAAMC,UAAU,GAAGN,IAAI,CAACK,OAAL,CAAa,GAAb,CAAnB;AACA,cAAME,cAAc,GAAGP,IAAI,CAACQ,KAAL,CAAWF,UAAX,CAAvB;AACAN,UAAAA,IAAI,GAAGA,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcF,UAAd,CAAP;AAEAL,UAAAA,SAAS,CAACQ,IAAV,CAAeT,IAAI,CAACQ,KAAL,CAAW,CAAC,CAAZ,CAAf;AACA,cAAIE,SAAS,GAAGV,IAAI,CAACG,MAAL,GAAc,CAA9B;AACA,cAAIQ,UAAU,GAAGD,SAAS,GAAG,CAA7B;;AACA,iBAAM,IAAN,EAAW;AAEP,gBAAIC,UAAU,IAAI,CAAlB,EAAqB;AACjBV,cAAAA,SAAS,CAACQ,IAAV,CAAeT,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcE,SAAd,CAAf;AACA;AACP;;AACDT,YAAAA,SAAS,CAACQ,IAAV,CAAeT,IAAI,CAACQ,KAAL,CAAWG,UAAX,EAAuBD,SAAvB,CAAf;AACAA,YAAAA,SAAS,GAAGC,UAAZ;AACAA,YAAAA,UAAU,GAAGD,SAAS,GAAG,CAAzB;AACC;;AAED,cAAIE,UAAU,GAAGX,SAAS,CAACE,MAAV,GAAiB,CAAlC;;AAGA,iBAAO,IAAP,EAAa;AACTD,YAAAA,YAAY,CAACO,IAAb,CAAkBR,SAAS,CAACW,UAAD,CAA3B;;AACA,gBAAGA,UAAU,IAAE,CAAf,EAAiB;AACb;AACH;;AAGDA,YAAAA,UAAU,IAAE,CAAZ;AACH;;AAGDA,UAAAA,UAAU,GAAG,CAAb;AACAZ,UAAAA,IAAI,GAAC,EAAL;;AACA,iBAAO,IAAP,EAAa;AACT,gBAAGY,UAAU,IAAEV,YAAY,CAACC,MAA5B,EAAmC;AAC/B;AACH;;AACD,gBAAIU,YAAY,GAAGX,YAAY,CAACU,UAAD,CAAZ,GAAyB,GAA5C;AACAZ,YAAAA,IAAI,IAAEa,YAAN;AACAD,YAAAA,UAAU,IAAE,CAAZ;AACH;;AACDZ,UAAAA,IAAI,GAAGA,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcR,IAAI,CAACG,MAAL,GAAY,CAA1B,IAA8BI,cAArC;AACH,SA5CD,MA4CK;AACDP,UAAAA,IAAI,GAACA,IAAL;AACH;AACJ,OAhDD,MAgDK;AACDc,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAd,QAAAA,SAAS,CAACQ,IAAV,CAAeT,IAAI,CAACQ,KAAL,CAAW,CAAC,CAAZ,CAAf;;AACA,YAAIE,UAAS,GAAGV,IAAI,CAACG,MAAL,GAAc,CAA9B;;AACA,YAAIQ,WAAU,GAAGD,UAAS,GAAG,CAA7B;;AACA,eAAM,IAAN,EAAW;AAEP,cAAIC,WAAU,IAAI,CAAlB,EAAqB;AACjBV,YAAAA,SAAS,CAACQ,IAAV,CAAeT,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcE,UAAd,CAAf;AACA;AACH;;AACDT,UAAAA,SAAS,CAACQ,IAAV,CAAeT,IAAI,CAACQ,KAAL,CAAWG,WAAX,EAAuBD,UAAvB,CAAf;AACAA,UAAAA,UAAS,GAAGC,WAAZ;AACAA,UAAAA,WAAU,GAAGD,UAAS,GAAG,CAAzB;AACH;;AACD,YAAIE,WAAU,GAAGX,SAAS,CAACE,MAAV,GAAiB,CAAlC;;AAGA,eAAO,IAAP,EAAa;AACTD,UAAAA,YAAY,CAACO,IAAb,CAAkBR,SAAS,CAACW,WAAD,CAA3B;;AACA,cAAGA,WAAU,IAAE,CAAf,EAAiB;AACb;AACH;;AAGDA,UAAAA,WAAU,IAAE,CAAZ;AACC;;AAGDA,QAAAA,WAAU,GAAG,CAAb;AACAZ,QAAAA,IAAI,GAAC,EAAL;;AACA,eAAO,IAAP,EAAa;AACT,cAAGY,WAAU,IAAEV,YAAY,CAACC,MAA5B,EAAmC;AAC/B;AACH;;AACD,cAAIU,aAAY,GAAGX,YAAY,CAACU,WAAD,CAAZ,GAAyB,GAA5C;;AACAZ,UAAAA,IAAI,IAAEa,aAAN;AACAD,UAAAA,WAAU,IAAE,CAAZ;AACH;;AACDZ,QAAAA,IAAI,GAAGA,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcR,IAAI,CAACG,MAAL,GAAY,CAA1B,CAAP;AACP;AACJ;AASJ;;AAGG,SACI,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEa,QAAQ,CAACC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAC,OAAP;AACCC,MAAAA,KAAK,EAACC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KADhC;AAECG,MAAAA,QAAQ,EAACxB,IAAI,CAACG,MAAL,GAAY,EAAZ,GAAe,EAAf,GAAkB;AAF5B,KAFX;AAMI,IAAA,oBAAoB,EAAE,KAN1B;AAOI,IAAA,QAAQ,EAAE,KAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASEH,IATF,CADJ,CADJ,CADJ;AAmBH;;AAED,eAAeF,OAAf;AACA,IAAMoB,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAC;AACNQ,IAAAA,aAAa,EAAC,KADR;AAENN,IAAAA,KAAK,EAACC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAFzB;AAGNO,IAAAA,MAAM,EAACN,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBK,MAAzB,GAAgC,EAHjC;AAINC,IAAAA,eAAe,EAAC;AAJV,GADmB;AAQ7BC,EAAAA,SAAS,EAAC;AACNV,IAAAA,KAAK,EAAC,OADA;AAENI,IAAAA,QAAQ,EAACxB,IAAI,CAACG,MAAL,GAAY,EAAZ,GAAe,EAAf,GAAkB,EAFrB;AAGNkB,IAAAA,KAAK,EAACC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF;AAHzB;AARmB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { Text, View,StyleSheet, TextInput,Dimensions,Keyboard,TouchableWithoutFeedback } from 'react-native';\r\n\r\nfunction Display({data}) {\r\nlet Text = data;\r\nlet textArray = [];\r\nlet newTextArray = [];\r\n//console.log(\"Text\",Text);\r\nif(Text.length>=4){\r\n    //console.log(\"Hello\");\r\n    if(Text!='Out of range'){\r\n        if (Text.includes('.')){\r\n            if(Text.indexOf('.')>3){\r\n                const floatIndex = Text.indexOf('.');\r\n                const afterFloatPart = Text.slice(floatIndex);\r\n                Text = Text.slice(0,(floatIndex));\r\n                \r\n                textArray.push(Text.slice(-3));\r\n                let lastIndex = Text.length - 3;\r\n                let firstIndex = lastIndex - 3;\r\n                while(true){\r\n                \r\n                    if (firstIndex <= 0) {\r\n                        textArray.push(Text.slice(0, lastIndex));\r\n                        break;\r\n                }\r\n                textArray.push(Text.slice(firstIndex, lastIndex));\r\n                lastIndex = firstIndex;\r\n                firstIndex = lastIndex - 3;\r\n                }\r\n    \r\n                let arrayIndex = textArray.length-1;\r\n                //console.log(\"Text Array--->\",textArray);\r\n                //let lastArrayIndex  = arrayIndex - textArray.length;\r\n                while (true) {\r\n                    newTextArray.push(textArray[arrayIndex]);\r\n                    if(arrayIndex==0){\r\n                        break;\r\n                    }\r\n                    //newTextArray.push(',');\r\n                    \r\n                    arrayIndex-=1;   \r\n                }\r\n                //console.log(\"=========================================\");\r\n                //console.log(\"New Text Array--->\",newTextArray);\r\n                arrayIndex = 0;\r\n                Text='';\r\n                while (true) {\r\n                    if(arrayIndex==newTextArray.length){\r\n                        break;\r\n                    }\r\n                    let concatString = newTextArray[arrayIndex]+\",\";\r\n                    Text+=concatString;\r\n                    arrayIndex+=1;\r\n                }\r\n                Text = Text.slice(0,(Text.length-1))+afterFloatPart;\r\n            }else{\r\n                Text=Text;\r\n            }\r\n        }else{\r\n            console.log(\"56656\");\r\n            textArray.push(Text.slice(-3));\r\n            let lastIndex = Text.length - 3;\r\n            let firstIndex = lastIndex - 3;\r\n            while(true){\r\n                \r\n                if (firstIndex <= 0) {\r\n                    textArray.push(Text.slice(0, lastIndex));\r\n                    break;\r\n                }\r\n                textArray.push(Text.slice(firstIndex, lastIndex));\r\n                lastIndex = firstIndex;\r\n                firstIndex = lastIndex - 3;\r\n            }\r\n            let arrayIndex = textArray.length-1;\r\n                //console.log(\"Text Array--->\",textArray);\r\n                //let lastArrayIndex  = arrayIndex - textArray.length;\r\n            while (true) {\r\n                newTextArray.push(textArray[arrayIndex]);\r\n                if(arrayIndex==0){\r\n                    break;\r\n                }\r\n                //newTextArray.push(',');\r\n                    \r\n                arrayIndex-=1;   \r\n                }\r\n                //console.log(\"=========================================\");\r\n                //console.log(\"New Text Array--->\",newTextArray);\r\n                arrayIndex = 0;\r\n                Text='';\r\n                while (true) {\r\n                    if(arrayIndex==newTextArray.length){\r\n                        break;\r\n                    }\r\n                    let concatString = newTextArray[arrayIndex]+\",\";\r\n                    Text+=concatString;\r\n                    arrayIndex+=1;\r\n                }\r\n                Text = Text.slice(0,(Text.length-1));\r\n        }\r\n    }\r\n    \r\n    //console.log(textArray);\r\n    \r\n    //console.log(Text.length);\r\n    //console.log(Text);\r\n    //console.log(\"=========================================\");\r\n    //console.log(Text);\r\n    //console.log(\"==================================\");\r\n}\r\n\r\n\r\n    return (\r\n        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n            <View style={styles.container}>\r\n                <TextInput \r\n                    textAlign=\"right\"\r\n                    style={{color:\"white\",\r\n                            width:Dimensions.get('screen').width,\r\n                            fontSize:Text.length>15?30:40,\r\n                            }}\r\n                    showSoftInputOnFocus={false}\r\n                    editable={false}\r\n                    \r\n                >{Text}</TextInput>\r\n\r\n            </View>\r\n        </TouchableWithoutFeedback>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default Display;\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flexDirection:\"row\",\r\n        width:Dimensions.get('screen').width,\r\n        height:Dimensions.get('screen').height/10,\r\n        backgroundColor:'red',\r\n       \r\n    },\r\n    textinput:{\r\n        color:\"white\",\r\n        fontSize:Text.length>15?30:40,\r\n        width:Dimensions.get('screen').width,\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}